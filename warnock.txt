registro Cor { int R; int G; int B };
registro Pixel { int x, int y, int z, Cor cor }
registro Poligono { Pixel[] pixels; }
registro Imagem { Poligono[] poligonos; }

funcao Imagem[] Divide(Imagem)
    W = Imagem.Largura
    H = Imagem.Altura
    imagens = Lista<Imagem>
    imagens.adicionar(Imagem.subimagem(0, W/2, 0, H/2))
    imagens.adicionar(Imagem.subimagem(W/2, W, 0, H/2))
    imagens.adicionar(Imagem.subimagem(0, W/2, H/2, H))
    imagens.adicionar(Imagem.subimagem(W/2, W, H/2, H))
    retorna imagens
fim_funcao

procedimento Warnock(ImagemOriginal)
    imagens = Lista<Imagem>
    imagens.adicionar(ImagemOriginal)

    para cada imagem em imagens
        se (um polígono cobre a região totalmente e está na frente)
            pintar(imagem) // pinta a região da cor do polígono
        senão se (nenhum  polígono a intercepta)
            pintar(imagem) // pinta a região da cor de fundo
        senão se (apenas um polígono a intercepta)
            pintar(imagem) // pinta a região (de dentro) da cor do polígono
        senão
            se (imagem.Largura > 1 e imagem.Altura > 1)
                imagens.adicionarTodos(divide(imagem))
            senão
                pintar(imagem) // trata-se de um único pixel
                // pintar o polígono com menor profundidade
        imagens.remove(imagem)
fim_procedimento
