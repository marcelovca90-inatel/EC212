registro Cor { int R; int G; int B };
registro Pixel { int x, int y, int z, Cor cor }
registro Poligono { Pixel[] pixels; }
registro Imagem { Poligono[] poligonos; }

// estruturas de dados globais
Buffer = Mapa<[x][y],Pilha<Cor>>
ZBuffer = Mapa<[x][y],Pilha<Inteiro>>

procedimento RemoverPixelsAtras(int z)
    // se o pixel estiver atrás de z, remova-o
    para i de 1 até ZBuffer.tamanho
        se (ZBuffer[i].z > z)
            Buffer.remove(i)
            ZBuffer.remove(i)
fim_procedimento

procedimento ABuffer

    // inicializa os buffers de cor e profundidade
    para cada Pixel em Buffer
        Buffer[x][y].push(COR_DE_FUNDO);
        ZBuffer[x][y].push(+INFINITO);

    // desenha os poligonosxw
    para cada Poligono em Imagem.poligonos
        para cada Pixel em Poligono.pixels
            Se (Pixel é completamente coberto por polígono e polígono é opaco) então
                remove_todos_atrás(Pixel.z)
                Buffer[x][y].push(Pixel.cor)
                ZBuffer[x][y].push(Pixel.z)
            Senão Se (Pixel.z < ZBuffer[x][y]) então
                Buffer[x][y].push(Pixel.cor)
                ZBuffer[[x][y].push(Pixel.z)

    // desenha a imagem
    para cada Par<[x][y],Pilha<Cor>> em Buffer
        enquanto Par.Pilha<Cor> não estiver vazia
            pintar(Par.Pixel, Par.Pilha<Cor>.top())
            Par.Pilha<Cor>.pop()
fim_procedimento
